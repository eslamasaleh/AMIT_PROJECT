
SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c9  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000687  00000000  00000000  00000a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c0  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001478  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034e  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018b  00000000  00000000  00001882  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001a0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
   4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   8:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  10:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  14:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  18:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  1c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  20:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  24:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  28:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  2c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  30:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  34:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  38:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  3c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  40:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  44:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  48:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  4c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  50:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  54:	6d 00       	.word	0x006d	; ????
  56:	71 00       	.word	0x0071	; ????
  58:	75 00       	.word	0x0075	; ????
  5a:	79 00       	.word	0x0079	; ????
  5c:	7d 00       	.word	0x007d	; ????
  5e:	81 00       	.word	0x0081	; ????
  60:	60 00       	.word	0x0060	; ????
  62:	60 00       	.word	0x0060	; ????
  64:	60 00       	.word	0x0060	; ????
  66:	60 00       	.word	0x0060	; ????
  68:	60 00       	.word	0x0060	; ????
  6a:	60 00       	.word	0x0060	; ????
  6c:	60 00       	.word	0x0060	; ????
  6e:	60 00       	.word	0x0060	; ????
  70:	60 00       	.word	0x0060	; ????
  72:	60 00       	.word	0x0060	; ????
  74:	60 00       	.word	0x0060	; ????
  76:	60 00       	.word	0x0060	; ????
  78:	60 00       	.word	0x0060	; ????
  7a:	60 00       	.word	0x0060	; ????
  7c:	60 00       	.word	0x0060	; ????
  7e:	60 00       	.word	0x0060	; ????
  80:	60 00       	.word	0x0060	; ????
  82:	85 00       	.word	0x0085	; ????

00000084 <__ctors_end>:
  84:	11 24       	eor	r1, r1
  86:	1f be       	out	0x3f, r1	; 63
  88:	cf e5       	ldi	r28, 0x5F	; 95
  8a:	d8 e0       	ldi	r29, 0x08	; 8
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  94:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000098 <__bad_interrupt>:
  98:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009c <main>:
#include "SPI.h"
#include "UART.h"

int main(void)
{
	SPI_inti(0);
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 87 00 	call	0x10e	; 0x10e <SPI_inti>
	
	DDRB |= (1<<6);
  a4:	87 b3       	in	r24, 0x17	; 23
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<4);
  aa:	87 b3       	in	r24, 0x17	; 23
  ac:	8f 7e       	andi	r24, 0xEF	; 239
  ae:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<5);
  b0:	87 b3       	in	r24, 0x17	; 23
  b2:	8f 7d       	andi	r24, 0xDF	; 223
  b4:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1<<7);
  b6:	87 b3       	in	r24, 0x17	; 23
  b8:	8f 77       	andi	r24, 0x7F	; 127
  ba:	87 bb       	out	0x17, r24	; 23
	DDRD =0xff;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	81 bb       	out	0x11, r24	; 17
    /* Replace with your application code */
    while (1) 
    {
		char test = SPI_RECIVE();
  c0:	0e 94 93 00 	call	0x126	; 0x126 <SPI_RECIVE>
		switch(test){
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fc 01       	movw	r30, r24
  c8:	e1 56       	subi	r30, 0x61	; 97
  ca:	f1 09       	sbc	r31, r1
  cc:	e8 31       	cpi	r30, 0x18	; 24
  ce:	f1 05       	cpc	r31, r1
  d0:	b8 f7       	brcc	.-18     	; 0xc0 <main+0x24>
  d2:	e6 5d       	subi	r30, 0xD6	; 214
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
  d6:	0c 94 97 00 	jmp	0x12e	; 0x12e <__tablejump2__>
			case 'a':
						PORTD |=(1<<0);
  da:	82 b3       	in	r24, 0x12	; 18
  dc:	81 60       	ori	r24, 0x01	; 1
  de:	82 bb       	out	0x12, r24	; 18
						break;
  e0:	ef cf       	rjmp	.-34     	; 0xc0 <main+0x24>
			case 'b':
						PORTD |=(1<<1);
  e2:	82 b3       	in	r24, 0x12	; 18
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	82 bb       	out	0x12, r24	; 18
						break;
  e8:	eb cf       	rjmp	.-42     	; 0xc0 <main+0x24>
			case 'c':
						PORTD &=~(1<<0);
  ea:	82 b3       	in	r24, 0x12	; 18
  ec:	8e 7f       	andi	r24, 0xFE	; 254
  ee:	82 bb       	out	0x12, r24	; 18
						break;
  f0:	e7 cf       	rjmp	.-50     	; 0xc0 <main+0x24>
			case 'd':
						PORTD &=~(1<<1);
  f2:	82 b3       	in	r24, 0x12	; 18
  f4:	8d 7f       	andi	r24, 0xFD	; 253
  f6:	82 bb       	out	0x12, r24	; 18
						break;
  f8:	e3 cf       	rjmp	.-58     	; 0xc0 <main+0x24>
						
			case 'e':
						PORTD |=(1<<2);
  fa:	82 b3       	in	r24, 0x12	; 18
  fc:	84 60       	ori	r24, 0x04	; 4
  fe:	82 bb       	out	0x12, r24	; 18
						break;
 100:	df cf       	rjmp	.-66     	; 0xc0 <main+0x24>
			case 'f': 
						PORTD &=~(1<<2);
 102:	82 b3       	in	r24, 0x12	; 18
 104:	8b 7f       	andi	r24, 0xFB	; 251
 106:	82 bb       	out	0x12, r24	; 18

						break;
 108:	db cf       	rjmp	.-74     	; 0xc0 <main+0x24>
						
			case 'x':
						PORTD =0;
 10a:	12 ba       	out	0x12, r1	; 18
						break;			
 10c:	d9 cf       	rjmp	.-78     	; 0xc0 <main+0x24>

0000010e <SPI_inti>:
}
void SPI_SEND_NUMB(int Data_num){
	char str[10];
	itoa(Data_num,str,10);
	SPI_SEND_STR(str);
}
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	31 f4       	brne	.+12     	; 0x11e <SPI_inti+0x10>
 112:	8d b1       	in	r24, 0x0d	; 13
 114:	80 61       	ori	r24, 0x10	; 16
 116:	8d b9       	out	0x0d, r24	; 13
 118:	87 b3       	in	r24, 0x17	; 23
 11a:	80 6b       	ori	r24, 0xB0	; 176
 11c:	87 bb       	out	0x17, r24	; 23
 11e:	8d b1       	in	r24, 0x0d	; 13
 120:	83 64       	ori	r24, 0x43	; 67
 122:	8d b9       	out	0x0d, r24	; 13
 124:	08 95       	ret

00000126 <SPI_RECIVE>:
	{
		SPI_SEND(String[i]);
	}
}
char SPI_RECIVE(){
	while(!(SPSR & (1<<SPIF)));
 126:	77 9b       	sbis	0x0e, 7	; 14
 128:	fe cf       	rjmp	.-4      	; 0x126 <SPI_RECIVE>
	return SPDR;
 12a:	8f b1       	in	r24, 0x0f	; 15
}
 12c:	08 95       	ret

0000012e <__tablejump2__>:
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	05 90       	lpm	r0, Z+
 134:	f4 91       	lpm	r31, Z
 136:	e0 2d       	mov	r30, r0
 138:	09 94       	ijmp

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
